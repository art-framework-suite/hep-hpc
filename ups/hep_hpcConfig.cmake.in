
set( hep_hpc_VERSION @HEP_HPC_VERSION@ )
set( hep_hpc_UPS_VERSION @UPS_PROD_VERSION@ )

get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/@PACKAGE_PREFIX_ADJUSTMENT@" ABSOLUTE)

macro(set_and_check _var _file)
  set(${_var} "${_file}")
  if(NOT EXISTS "${_file}")
    message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")
  endif()
endmacro()

macro(check_required_components _NAME)
  foreach(comp ${${_NAME}_FIND_COMPONENTS})
    if(NOT ${_NAME}_${comp}_FOUND)
      if(${_NAME}_FIND_REQUIRED_${comp})
        set(${_NAME}_FOUND FALSE)
      endif()
    endif()
  endforeach()
endmacro()

set (HEP_HPC_HDF5 ${PACKAGE_PREFIX_DIR}/@INSTALLED_DIR_ADJUSTMENT@lib/${CMAKE_SHARED_LIBRARY_PREFIX}hep_hpc_hdf5${CMAKE_SHARED_LIBRARY_SUFFIX})
set (HEP_HPC_UTILITIES ${PACKAGE_PREFIX_DIR}/@INSTALLED_DIR_ADJUSTMENT@lib/${CMAKE_SHARED_LIBRARY_PREFIX}hep_hpc_Utilities${CMAKE_SHARED_LIBRARY_SUFFIX})
set (HEP_HPC_MEMSTREAM ${PACKAGE_PREFIX_DIR}/@INSTALLED_DIR_ADJUSTMENT@lib/${CMAKE_SHARED_LIBRARY_PREFIX}memstream${CMAKE_SHARED_LIBRARY_SUFFIX})
if (@WANT_MPI@)
  set (HEP_HPC_MPI ${PACKAGE_PREFIX_DIR}/@INSTALLED_DIR_ADJUSTMENT@lib/${CMAKE_SHARED_LIBRARY_PREFIX}hep_hpc_MPI${CMAKE_SHARED_LIBRARY_SUFFIX})
endif()

####################################################################################
find_package(HDF5 REQUIRED COMPONENTS C)
set (HEP_HPC_INCLUDE_DIRS ${PACKAGE_PREFIX_DIR}/@INSTALLED_DIR_ADJUSTMENT@include ${HDF5_INCLUDE_DIRS})

if (@HEP_HPC_USE_BOOST_INDEX_SEQUENCE@)
  find_package(Boost REQUIRED)
  list(APPEND HEP_HPC_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
endif()

if (@WANT_MPI@)
  find_package(MPI REQUIRED)
  list(APPEND HEP_HPC_INCLUDE_DIRS ${MPI_C_INCLUDE_PATH})
endif()

check_required_components(hep_hpc)
